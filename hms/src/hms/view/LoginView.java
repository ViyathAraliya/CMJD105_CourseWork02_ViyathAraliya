package hms.view;

import hms.controller.UserController;
import hms.dto.UserDto;
import java.util.Arrays;
import java.util.List;
import javax.swing.JOptionPane;

public class LoginView extends javax.swing.JFrame {
    
    private final UserController USER_CONTROLLER;
    
    public LoginView() {
          this.setResizable(false);
        USER_CONTROLLER = new UserController();
        initComponents();
        
        if (isEmpty()) {
            
            
            userNameField.setEditable(false);
            passwordField.setEditable(false);
            loginBtn.setEnabled(false);
            
        } else {
            registerFirstUserBtn.setEnabled(false);
            
        }
        try{check_for_keep_logged_in();}catch(Exception e){
        JOptionPane.showMessageDialog(this,e.getMessage());}
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        userNameLble = new javax.swing.JLabel();
        userNameField = new javax.swing.JTextField();
        passwordLbl = new javax.swing.JLabel();
        passwordField = new javax.swing.JPasswordField();
        loginBtn = new javax.swing.JButton();
        registerFirstUserBtn = new javax.swing.JButton();
        titleLbl = new javax.swing.JLabel();
        keepLoggedInCheckBox = new java.awt.Checkbox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        userNameLble.setText("username");

        passwordLbl.setText("password");

        loginBtn.setText("Login");
        loginBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginBtnActionPerformed(evt);
            }
        });

        registerFirstUserBtn.setText("register the app");
        registerFirstUserBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                registerFirstUserBtnActionPerformed(evt);
            }
        });

        titleLbl.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        titleLbl.setText("Hotel Manangement System");

        keepLoggedInCheckBox.setLabel("keep logged in");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(loginBtn)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(userNameLble, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(85, 85, 85)
                                .addComponent(registerFirstUserBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(11, 11, 11)
                        .addComponent(keepLoggedInCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(243, 243, 243)
                        .addComponent(titleLbl)))
                .addContainerGap(297, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(titleLbl, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addGap(26, 26, 26)
                .addComponent(registerFirstUserBtn)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(userNameLble)
                    .addComponent(userNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordLbl)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(loginBtn)
                    .addComponent(keepLoggedInCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void registerFirstUserBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_registerFirstUserBtnActionPerformed
        createTheFirstUser();
    }//GEN-LAST:event_registerFirstUserBtnActionPerformed

    private void loginBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginBtnActionPerformed
        login();// TODO add your handling code here:
    }//GEN-LAST:event_loginBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Checkbox keepLoggedInCheckBox;
    private javax.swing.JButton loginBtn;
    private javax.swing.JPasswordField passwordField;
    private javax.swing.JLabel passwordLbl;
    private javax.swing.JButton registerFirstUserBtn;
    private javax.swing.JLabel titleLbl;
    private javax.swing.JTextField userNameField;
    private javax.swing.JLabel userNameLble;
    // End of variables declaration//GEN-END:variables

    private boolean isEmpty() {
        return USER_CONTROLLER.isEmpty();
    }
    
    private void createTheFirstUser() {
        new RegisterView().setVisible(true);
        this.dispose();
        
    }

    private void login() {
        
        String userName = userNameField.getText();
        char pwd[] = passwordField.getPassword();
        
        try {
            boolean userExists = USER_CONTROLLER.doesUserNameExist(userName);
            if (userExists) {
                
                UserDto userDto = USER_CONTROLLER.getUser(userName);
                if (Arrays.equals(pwd, userDto.getPassword())) {
                    boolean keepLoggedIn = keepLoggedInCheckBox.getState();
                    userDto.setKeep_logged_in(keepLoggedIn);
                    USER_CONTROLLER.setKeepLoggedInStatus(userDto);
                    
                    new HomeView().setVisible(true);
                    this.dispose();
                    
                } else {
                    JOptionPane.showMessageDialog(this, "incorrect password");
                }
                
            } else {
                JOptionPane.showMessageDialog(this, "no such user.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
        
    }
    
    public void check_for_keep_logged_in() throws Exception {
        List<UserDto> userDtos = USER_CONTROLLER.getAll();
        for (UserDto dto : userDtos) {
            if (dto.isKeep_logged_in()) {
                userNameField.setText(dto.getName());
                char[] pwd=dto.getPassword();
                keepLoggedInCheckBox.setState(true);
             
                passwordField.setText(String.copyValueOf(dto.getPassword()));
            }
        }
        
    }
}

